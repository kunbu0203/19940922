{"version":3,"sources":["assets/js/main2.js"],"names":["$","$video","document","querySelector","$canvas","ctx","getContext","streamObj","front","openCam","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","catch","error","alert","message","name","addEventListener","width","videoWidth","height","videoHeight","on","getTracks","forEach","track","stop","faceMesh","FaceMesh","locateFile","file","setOptions","maxNumFaces","refineLandmarks","minDetectionConfidence","minTrackingConfidence","onResults","results","requestAnimationFrame","clearRect","save","translate","scale","drawImage","image","multiFaceLandmarks","landmarks","drawConnectors","FACEMESH_RIGHT_EYE","color","FACEMESH_LEFT_EYE","FACEMESH_FACE_OVAL","FACEMESH_LIPS","distance","x","y","length","headTop","Math","abs","img","restore","Image","src","camera","Camera","onFrame","async","send","ideal","facingMode","start"],"mappings":"AAAAA,EAAE,WACE,MAAMC,EAASC,SAASC,cAAc,uBAChCC,EAAUF,SAASC,cAAc,wBACjCE,EAAMD,EAAQE,WAAW,MAC/B,IAAIC,EACAC,GAAQ,EAKZ,SAASC,IAELC,UAAUC,aAAaC,aAAa,CAChCC,OAAO,IACRC,KAAK,SAAUC,GACdR,EAAYQ,EACZd,EAAOe,UAAYD,IACpBE,MAAM,SAAUC,GACfC,MAAM,eAAgBD,EAAME,QAASF,EAAMG,QAVnDZ,IAcAR,EAAOqB,iBAAiB,aAAc,WAElClB,EAAQmB,MAAQtB,EAAOuB,WACvBpB,EAAQqB,OAASxB,EAAOyB,cACzB,GAEH1B,EAAE,2BAA2B2B,GAAG,QAAS,WACrCpB,EAAUqB,YAAYC,QAAQC,GAASA,EAAMC,QAC7CvB,GAASA,EACTC,MAMJ,MAAMuB,EAAW,IAAIC,SAAS,CAC1BC,WAAaC,wDAA8DA,MAG/EH,EAASI,WAAW,CAChBC,YAAa,EACbC,iBAAiB,EACjBC,uBAAwB,GACxBC,sBAAuB,KAG3BR,EAASS,UAET,SAAmBC,GACfC,sBAAsB,KAWlB,GATAtC,EAAIuC,UAAU,EAAG,EAAGxC,EAAQmB,MAAOnB,EAAQqB,QAC3CpB,EAAIwC,OACArC,IAEAH,EAAIyC,UAAU1C,EAAQmB,MAAO,GAC7BlB,EAAI0C,OAAO,EAAG,IAElB1C,EAAI2C,UAAUN,EAAQO,MAAO,EAAG,EAAG7C,EAAQmB,MAAOnB,EAAQqB,QAEtDiB,EAAQQ,mBACR,IAAK,MAAMC,KAAaT,EAAQQ,mBAG5BE,eAAe/C,EAAK8C,EAAWE,mBAAoB,CAAEC,MAAO,YAC5DF,eAAe/C,EAAK8C,EAAWI,kBAAmB,CAAED,MAAO,YAC3DF,eAAe/C,EAAK8C,EAAWK,mBAAoB,CAAEF,MAAO,YAC5DF,eAAe/C,EAAK8C,EAAWM,cAAe,CAAEH,MAAO,YAI/D,IAMUI,EAGAC,EACAC,EAVNlB,EAAQQ,oBAA0D,EAApCR,EAAQQ,mBAAmBW,SAInDC,GAHAX,EAAYT,EAAQQ,mBAAmB,IAGnB,IAEpBQ,EAAuB,KADXK,KAAKC,IAAIb,EAAU,IAAIQ,EAAIR,EAAU,KAAKQ,GAAKvD,EAAQmB,OAInEoC,EAAIG,EAAQH,EAAIvD,EAAQmB,MACxBqC,EAAIE,EAAQF,EAAIxD,EAAQqB,OAG9BpB,EAAI2C,UAAUiB,EAAKN,EAAI,GAAKD,EAAUE,EAAI,IAAMF,EAAU,IAAMA,EAAU,IAAMA,IAGpFrD,EAAI6D,cAGZ,MAAMD,EAAM,IAAIE,MAChBF,EAAIG,IAAM,+BAEV,MAAMC,EAAS,IAAIC,OAAOrE,EAAQ,CAC9BsE,QAASC,gBACCxC,EAASyC,KAAK,CAAExB,MAAOhD,KAEjCsB,MAAO,CAAEmD,MAAO,MAChBjD,OAAQ,CAAEiD,MAAO,MACjBC,WAAYnE,EAAQ,OAAS,gBAEjC6D,EAAOO","file":"main2.min.js","sourcesContent":["$(function () {\n    const $video = document.querySelector('[data-camera-video]');\n    const $canvas = document.querySelector('[data-camera-canvas]');\n    const ctx = $canvas.getContext('2d');\n    let streamObj; // 預計用來存放 串流相關的物件(MediaStream)\n    let front = true;\n\n    // 開啟 webcam\n    openCam();\n\n    function openCam() {\n        // 開啟視訊鏡頭，瀏覽器會跳詢問視窗\n        navigator.mediaDevices.getUserMedia({\n            video: true\n        }).then(function (stream) {\n            streamObj = stream;         // 將串流物件放在 streamObj 全域變數，方便後面關閉 webcam 時會用到\n            $video.srcObject = stream;  // video 標籤顯示 webcam 畫面\n        }).catch(function (error) {     // 若無法取得畫面，執行 catch\n            alert('取得相機訪問權限失敗: ', error.message, error.name);\n        });\n    }\n\n    $video.addEventListener('loadeddata', function () {\n        // 將 video 標籤的影片寬高，顯示於 canvas 標籤上\n        $canvas.width = $video.videoWidth;\n        $canvas.height = $video.videoHeight;\n    }, false);\n\n    $('[data-camera-direction]').on('click', function () {\n        streamObj.getTracks().forEach(track => track.stop());\n        front = !front;\n        openCam();\n    });\n\n\n\n\n    const faceMesh = new FaceMesh({\n        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`, // 本地路徑\n    });\n\n    faceMesh.setOptions({\n        maxNumFaces: 1,\n        refineLandmarks: true,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5,\n    });\n\n    faceMesh.onResults(onResults);\n\n    function onResults(results) {\n        requestAnimationFrame(() => {\n            // 清空Canvas\n            ctx.clearRect(0, 0, $canvas.width, $canvas.height);\n            ctx.save();\n            if (front) {\n                // 水平反轉\n                ctx.translate($canvas.width, 0);\n                ctx.scale(-1, 1);\n            }\n            ctx.drawImage(results.image, 0, 0, $canvas.width, $canvas.height);\n\n            if (results.multiFaceLandmarks) {\n                for (const landmarks of results.multiFaceLandmarks) {\n                    // drawConnectors(ctx, landmarks, FACEMESH_TESSELATION,\n                    //     { color: '#C0C0C070', lineWidth: 1 });\n                    drawConnectors(ctx, landmarks, FACEMESH_RIGHT_EYE, { color: '#FF3030' });\n                    drawConnectors(ctx, landmarks, FACEMESH_LEFT_EYE, { color: '#30FF30' });\n                    drawConnectors(ctx, landmarks, FACEMESH_FACE_OVAL, { color: '#E0E0E0' });\n                    drawConnectors(ctx, landmarks, FACEMESH_LIPS, { color: '#E0E0E0' });\n                }\n            }\n\n            if (results.multiFaceLandmarks && results.multiFaceLandmarks.length > 0) {\n                const landmarks = results.multiFaceLandmarks[0];\n\n                // 提取頭部和相機的距離\n                const headTop = landmarks[10];  // 頭頂坐標\n                const faceWidth = Math.abs(landmarks[33].x - landmarks[263].x) * $canvas.width; // 33和263是眼睛的外側標誌點\n                const distance = faceWidth * 0.01; // 計算距離\n\n                // 計算頭頂的座標\n                const x = headTop.x * $canvas.width;\n                const y = headTop.y * $canvas.height;\n\n                // 繪製頭頂的圖片，根據距離調整大小\n                ctx.drawImage(img, x - 50 * distance, y - 100 * distance, 100 * distance, 100 * distance);\n            }\n\n            ctx.restore();\n        });\n    }\n    const img = new Image();\n    img.src = '/assets/image/touch/logo.png'; // 你想顯示的圖片路徑\n\n    const camera = new Camera($video, {\n        onFrame: async () => {\n            await faceMesh.send({ image: $video });\n        },\n        width: { ideal: 656 * 3 },\n        height: { ideal: 656 * 3 },\n        facingMode: front ? 'user' : 'environment'\n    });\n    camera.start();\n});"],"sourceRoot":"/"}